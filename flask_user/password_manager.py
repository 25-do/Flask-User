""" This file hashes and verifies passwords for Flask-User.
"""

# Copyright (c) 2013 by Ling Thio
# Author: Ling Thio (ling.thio@gmail.com)
# License: Simplified BSD License, see LICENSE.txt for more details.


from __future__ import print_function

from flask import current_app
from passlib.context import CryptContext


class PasswordManager(object):
    """Hash and verify user passwords using passlib """

    def __init__(self, app, password_hash):
        """
        Create a passlib CryptContext.

        Args:
            password_hash(str): The name of a valid passlib password hash.
                Examples: ``'bcrypt', 'pbkdf2_sha512', 'sha512_crypt' or 'argon2'``.

        Example:
            ``password_manager = PasswordManager('bcrypt')``
        """

        self.app = app

        # Create a passlib CryptContext
        self.password_crypt_context = CryptContext(
            schemes=[password_hash])


    def hash_password(self, password):
        """Hash plaintext ``password`` using the ``password_hash`` specified in the constructor.

        Args:
            password(str): Plaintext password that the user types in.
        Returns:
            hashed password.
        Example:
            ``user.password = hash_password('mypassword')``
        """

        # Use passlib's CryptContext to hash a password
        hashed_password = self.password_crypt_context.encrypt(password)

        return hashed_password


    def verify_password(self, password, hashed_password):
        """Verify plaintext ``password`` against ``hashed password``.

        Args:
            password(str): Plaintext password that the user types in.
            hashed_password(str): Hashed password generated by a previous call to ``hash_password()``.
        Returns:
            | True when ``password`` matches ``hashed_password``.
            | False otherwise.
        Example:

            ::

                if verify_password('mypassword', user.password):
                    login_user(user)
        """

        # Use passlib's CryptContext to verify a password
        return self.password_crypt_context.verify(password, hashed_password)



